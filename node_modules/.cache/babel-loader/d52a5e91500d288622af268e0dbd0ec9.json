{"ast":null,"code":"import axios from \"axios\";\nimport { registerApi, loginApi, fetchCartApi } from \"../../utility/apis\";\nimport { LOGIN_FAIL, LOGIN_START, LOGIN_SUCCESS, REGISTER_START, REGISTER_SUCCESS, REGISTER_FAIL, AUTO_LOGIN, LIST_CART_START, LIST_CART_SUCCESS, LIST_CART_FAIL, CLEAR_LOGIN } from \"./actionTypes\";\n\nconst loginStart = () => {\n  return {\n    type: LOGIN_START\n  };\n};\n\nconst loginSuccess = data => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: data\n  };\n};\n\nconst loginFail = err => {\n  return {\n    type: LOGIN_FAIL,\n    payload: err\n  };\n};\n\nexport const login = (email, password) => async dispatch => {\n  dispatch(loginStart());\n\n  try {\n    const response = await axios.post(loginApi, {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.data.success) {\n      dispatch(loginSuccess(response.data));\n    } else {\n      dispatch(loginFail(response.data.message));\n    }\n  } catch (err) {\n    dispatch(loginFail(err.toString()));\n  }\n}; //    register\n\nconst registerStart = () => {\n  return {\n    type: REGISTER_START\n  };\n};\n\nconst registerSuccess = data => {\n  return {\n    type: REGISTER_SUCCESS,\n    payload: data\n  };\n};\n\nconst registerFail = err => {\n  return {\n    type: REGISTER_FAIL,\n    payload: err\n  };\n};\n\nexport const register = (email, password, confirmPassword) => async dispatch => {\n  dispatch(registerStart);\n  if (password !== confirmPassword) dispatch(registerFail(\"Password and confirm password dosent match\"));\n\n  try {\n    const response = await axios.post(registerApi, {\n      email,\n      password,\n      confirmPassword\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (!response.data.success) {\n      console.log(response.data);\n      return dispatch(registerFail(response.data.message));\n    }\n\n    return dispatch(registerSuccess(response.data));\n  } catch (err) {\n    dispatch(registerFail(err.toString()));\n  }\n};\nexport const autoLogin = () => {\n  return {\n    type: AUTO_LOGIN\n  };\n}; // fetch cart\n\nconst fetchCartStart = () => {\n  return {\n    type: LIST_CART_START\n  };\n};\n\nconst fetchCartSuccess = data => {\n  return {\n    type: LIST_CART_SUCCESS,\n    payload: data\n  };\n};\n\nconst fetchCartFail = err => {\n  return {\n    type: LIST_CART_FAIL,\n    payload: err\n  };\n};\n\nexport const fetchCart = token => async dispatch => {\n  dispatch(fetchCartStart());\n\n  try {\n    const request = await axios.get(fetchCartApi, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (!request.data.success) {\n      dispatch(fetchCartFail(request.data.message));\n    }\n\n    return dispatch(fetchCartSuccess(request.data.data));\n  } catch (err) {\n    return dispatch(fetchCartFail(err.toString()));\n  }\n}; // clear error\n\nconst clearerror = () => {\n  return {\n    type: CLEAR_LOGIN\n  };\n};\n\nexport const clearProfileError = () => dispatch => {\n  return dispatch(clearerror());\n};","map":{"version":3,"sources":["D:/Travel Right/travel-right-front/src/store/action/profile.ts"],"names":["axios","registerApi","loginApi","fetchCartApi","LOGIN_FAIL","LOGIN_START","LOGIN_SUCCESS","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAIL","AUTO_LOGIN","LIST_CART_START","LIST_CART_SUCCESS","LIST_CART_FAIL","CLEAR_LOGIN","loginStart","type","loginSuccess","data","payload","loginFail","err","login","email","password","dispatch","response","post","headers","success","message","toString","registerStart","registerSuccess","registerFail","register","confirmPassword","console","log","autoLogin","fetchCartStart","fetchCartSuccess","fetchCartFail","fetchCart","token","request","get","Authorization","clearerror","clearProfileError"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {registerApi, loginApi, fetchCartApi} from \"../../utility/apis\";\r\nimport {\r\n  LOGIN_FAIL,\r\n  LOGIN_START,\r\n  LOGIN_SUCCESS,\r\n  REGISTER_START,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  AUTO_LOGIN,\r\n  LIST_CART_START,\r\n  LIST_CART_SUCCESS,\r\n  LIST_CART_FAIL,\r\n  CLEAR_LOGIN,\r\n} from \"./actionTypes\";\r\n\r\nconst loginStart = () => {\r\n  return {\r\n    type: LOGIN_START,\r\n  };\r\n};\r\n\r\nconst loginSuccess = (data: any) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nconst loginFail = (err: any) => {\r\n  return {\r\n    type: LOGIN_FAIL,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const login =\r\n  (email: string, password: string) => async (dispatch: any) => {\r\n    dispatch(loginStart());\r\n    try {\r\n      const response = await axios.post(\r\n        loginApi,\r\n        {\r\n          email,\r\n          password,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (response.data.success) {\r\n        dispatch(loginSuccess(response.data));\r\n      } else {\r\n        dispatch(loginFail(response.data.message));\r\n      }\r\n    } catch (err) {\r\n      dispatch(loginFail(err.toString()));\r\n    }\r\n  };\r\n\r\n//    register\r\n\r\nconst registerStart = () => {\r\n  return {\r\n    type: REGISTER_START,\r\n  };\r\n};\r\nconst registerSuccess = (data: any) => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n    payload: data,\r\n  };\r\n};\r\nconst registerFail = (err: any) => {\r\n  return {\r\n    type: REGISTER_FAIL,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const register =\r\n  (email: string, password: string, confirmPassword: string) =>\r\n  async (dispatch: any) => {\r\n    dispatch(registerStart);\r\n    if (password !== confirmPassword)\r\n      dispatch(registerFail(\"Password and confirm password dosent match\"));\r\n    try {\r\n      const response = await axios.post(\r\n        registerApi,\r\n        {\r\n          email,\r\n          password,\r\n          confirmPassword,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (!response.data.success) {\r\n        console.log(response.data);\r\n\r\n        return dispatch(registerFail(response.data.message));\r\n      }\r\n\r\n      return dispatch(registerSuccess(response.data));\r\n    } catch (err) {\r\n      dispatch(registerFail(err.toString()));\r\n    }\r\n  };\r\nexport const autoLogin = () => {\r\n  return {\r\n    type: AUTO_LOGIN,\r\n  };\r\n};\r\n\r\n// fetch cart\r\n\r\nconst fetchCartStart = () => {\r\n  return {\r\n    type: LIST_CART_START,\r\n  };\r\n};\r\n\r\nconst fetchCartSuccess = (data: any) => {\r\n  return {\r\n    type: LIST_CART_SUCCESS,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nconst fetchCartFail = (err: any) => {\r\n  return {\r\n    type: LIST_CART_FAIL,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const fetchCart = (token: string) => async (dispatch: any) => {\r\n  dispatch(fetchCartStart());\r\n  try {\r\n    const request = await axios.get(fetchCartApi, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    if (!request.data.success) {\r\n      dispatch(fetchCartFail(request.data.message));\r\n    }\r\n    return dispatch(fetchCartSuccess(request.data.data));\r\n  } catch (err) {\r\n    return dispatch(fetchCartFail(err.toString()));\r\n  }\r\n};\r\n\r\n// clear error\r\nconst clearerror = () => {\r\n  return {\r\n    type: CLEAR_LOGIN,\r\n  };\r\n};\r\nexport const clearProfileError = () => (dispatch: any) => {\r\n  return dispatch(clearerror());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}